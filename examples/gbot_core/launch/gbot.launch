<?xml version="1.0"?>

<launch>    
    
    <!-- Camera Model and Name -->
    <arg name="camera_name"           default="zed2" /> <!-- The name you want -->
    <arg name="camera_model"          default="zed2" /> <!-- 'zed' or 'zedm' or 'zed2' -->
    <arg name="zed_nodelet_name"         default="zed_nodelet" />

    <!-- Load SVO file -->
    <arg name="svo_file"              default="" /><!-- <arg name="svo_file" default="path/to/svo/file.svo"> -->
    <!-- Remote stream -->
    <arg name="stream"                default="" /> <!-- <arg name="stream" default="<ip_address>:<port>"> -->

    <!-- Base frame -->
    <arg name="base_frame"            default="base_link" />

    <!-- Publish ZED urdf -->
    <arg name="publish_urdf"          default="true" />

    <arg name="camera_id"             default="0" />
    <arg name="gpu_id"                default="-1" />

    <!-- Position respect to base frame (i.e. "base_link) -->
    <arg name="cam_pos_x"             default="0.0" />
    <arg name="cam_pos_y"             default="0.0" />
    <arg name="cam_pos_z"             default="0.0" />

    <!-- Orientation respect to base frame (i.e. "base_link) -->
    <arg name="cam_roll"              default="0.0" />
    <arg name="cam_pitch"             default="0.0" />
    <arg name="cam_yaw"               default="0.0" />

    <!-- Name of the Nodelet Manager -->
    <arg name="nodelet_manager_name"  default="$(arg camera_name)_nodelet_manager" />

    <group ns="$(arg camera_name)">
        <!-- Nodelet Manager -->
        <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager_name)"  args="manager" output="screen" />

        <!-- Load ZED wrapper nodelet -->
        <include file="$(find zed_wrapper)/launch/include/zed_camera_nodelet.launch">
            <arg name="nodelet_manager_name"            value="$(arg nodelet_manager_name)" />
            <arg name="camera_name"                     value="$(arg camera_name)" />
            <arg name="svo_file"                        value="$(arg svo_file)" />
            <arg name="stream"                          value="$(arg stream)" />
            <arg name="node_name"                       value="$(arg zed_nodelet_name)" />
            <arg name="camera_model"                    value="$(arg camera_model)" />
            <arg name="base_frame"                      value="$(arg base_frame)" />
            <arg name="publish_urdf"                    value="$(arg publish_urdf)" />
            <arg name="cam_pos_x"                       value="$(arg cam_pos_x)" />
            <arg name="cam_pos_y"                       value="$(arg cam_pos_y)" />
            <arg name="cam_pos_z"                       value="$(arg cam_pos_z)" />
            <arg name="cam_roll"                        value="$(arg cam_roll)" />
            <arg name="cam_pitch"                       value="$(arg cam_pitch)" />
            <arg name="cam_yaw"                         value="$(arg cam_yaw)" />
        </include>

        <!-- Virtual laser scan as nodelet -->
        <!-- "$ sudo apt install ros-kinetic-depthimage-to-laserscan" -->
        <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet $(arg nodelet_manager_name)">
             <param name="scan_height" value="10"/>
             <param name="output_frame_id" value="$(arg camera_name)_left_camera_frame"/>
             <param name="range_min" value="0.1"/>
             <remap from="image" to="$(arg zed_nodelet_name)/depth/depth_registered"/>
        </node>
    </group>

		<!-- Start Google Cartographer node with custom configuration file-->
    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
          -configuration_directory
              $(find gbot_core)/configuration_files
          -configuration_basename gbot_2d.lua" output="screen">
	    <remap from="scan" to="/zed2/scan" />
    	<remap from="imu" to="/zed2/zed_nodelet/imu/data_raw" />
      <remap from="odom" to="/zed2/zed_nodelet/odom" />
    </node>

		<!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />

    <!-- Launch rivz display -->
    <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find gbot_core)/rviz/$(arg camera_model).rviz" output="screen" /> -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find gbot_core)/rviz/demo.rviz" output="screen" />
    
</launch>
